const { Utils } = require("erela.js")
const { RichEmbed } = require("discord.js")
const Discord = require("discord.js");
const client = new Discord.Client();

prefix:
 client.login("token")
module.exports = {
    config: {
        name: "play",
        description: "Joue une musique/playlist ou cherche en une via youtube",
        usage: "<input>",
        category: "music",
        accecabebly: "Member",
        aliases: ["p", "pplay"]
    },
    run: async (bot, message, args) => {
        const { voiceChannel } = message.member;
        if (!voiceChannel) return message.channel.send("**Tu doit être dans un salon vocal !**");


        const permissions = voiceChannel.permissionsFor(bot.user);
        if (!permissions.has("CONNECT")) return message.channel.send("**Je n'ai pas la permission nécessaire pour me connecter au salon vocal**");
        if (!permissions.has("SPEAK")) return message.channel.send("**Je n'arrive pas a me connecter au salon !, vérifie si je possède la permission !**");

        if(!args[0]) return message.channel.send("**Tu a oublié le nom/url de la musique :/**");

        const player = bot.music.player.spawn({
            guild: message.guild,
            textChannel: message.channel,
            voiceChannel
        });

        bot.music.search(args.join(" "), message.author).then(async res => {
            switch (res.loadType) {
                case 'TRACK_LOADED':
                    player.queue.add(res.tracks[0]);
                    message.channel.send(`Enqueuing \'${res.tracks[0].title}\` \`${Utils.formatTime(res.tracks[0].duration, true)}\``);
                    if (!player.playing) player.play()
                    break;


                    case "SEARCH_RESULT":                      
                    let index = 1;
                    const tracks = res.tracks.slice(0, 5);
                    const embed = new RichEmbed()
                        .setAuthor("Musique Sélectionné", message.author.displayAvatarURL)
                        .setDescription(tracks.map(video => `**${index++} -** ${video.title}`))
                        .setFooter("**Tu a 30sec pour répondre, écrit 'cancel' pour stopper la sélection**")

                    await message.channel.send(embed)

                    const collector = message.channel.createMessageCollector(m => {
                        return m.author.id === message.author.id && new RegExp(`^([1-5|cancel])$`, "i").test(m.content)
                    }, { time: 30000, max: 1});

                    collector.on("end", (_, reason) => {
                        if (/cancel/i.test(m.content)) return collector.stop("stoppé")

                        const tracks = tracks[Number(m.content) - 1];
                        player.queue.add(track)
                        message.channel.send(`Enqueuing \ ${track.title}\` \`${Utils.formatTime(track.duration, true)}\``);
                        if(!player.playing) player.play();
                    });

                    collector.on("end", (_, reason) => {
                        if(["time", "cancel"].includes(reason)) return message.channel.send("Stoppé")
                    });
                    break;

                case "PLAYLIST_LOADED":
                    res.playlist.tracks.forEach(track => player.queue.add(track));
                    const duration = Utils.formatTime(res.playlist.tracks.reduce((acc, cur) => ({duration: acc.duration + cur.duration})).duration, true)
                    message.channel.send(`Enqueuing \`${res.playlist.tracks.lenght}\` \`${duration}\` tracks in playlist \`${res.playlist.info.name}\``);
                    if(!player.playing) player.play();
                    break;
            }
        }).catch(err => message.channel.send(err.message))
    }
}

let activities = [ `${client.guilds.size} Serveurs` , `${client.channels.size} Channels`, `${client.users.size} Utillisateurs` ], i = 0;
setInterval(() => client.user.setActivity(`${client.prefix}En Développement ${activities[i++ % activities.length]}`, { type: "STREAMING"}), 15000)
